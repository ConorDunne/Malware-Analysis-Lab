resource "aws_network_interface" "network_interface_flarevm" {
  subnet_id = aws_subnet.lab_subnet.id
  private_ips = ["172.16.${var.lab_instance.index}.4"]
  security_groups = [var.security_groups.flare.id]

  tags = {
    Name = "${var.defaults.env}-${var.lab_instance.name}-flarevm-interface"
    Environment = "${var.defaults.env}"
  }
}

resource "aws_instance" "flarevm" {
  depends_on = [
    data.local_file.url
  ]

  ami = "ami-080f51193033058f6"
  instance_type = "t2.medium"

  network_interface {
    network_interface_id = aws_network_interface.network_interface_flarevm.id
    device_index = 0
  }

  tags = {
    Name = "${var.defaults.env}-${var.lab_instance.name}-flarevm-ec2"
    Environment = "${var.defaults.env}"
  }

  user_data = <<EOF
version: 1.1
tasks:
- task: executeScript
  inputs:
  - frequency: always
    type: powershell
    runAs: localSystem
    content: |-
      add-type @"
      using System.Net;
      using System.Security.Cryptography.X509Certificates;
      public class TrustAllCertsPolicy : ICertificatePolicy {
          public bool CheckValidationResult(
              ServicePoint srvPoint, X509Certificate certificate,
              WebRequest request, int certificateProblem) {
                  return true;
              }
       }
      "@
      [System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
      Invoke-WebRequest -Uri "${data.local_file.url.content}" -OutFile "C:\Users\Administrator\Desktop\${var.lab_instance.name}.zip" 
      Get-NetAdapter -Name "Ethernet 2" | Set-DnsClientServerAddress -ServerAddresses "172.16.${var.lab_instance.index}.6"
  EOF
}

resource "null_resource" "url" {
  provisioner "local-exec" {
    command = "aws s3 presign s3://${var.storage.id}/${var.lab_instance.name}.zip | tr -d '\n' > malware_url"
  }
}

data "local_file" "url" {
  depends_on = [
    null_resource.url
  ]
  filename = "malware_url"
}